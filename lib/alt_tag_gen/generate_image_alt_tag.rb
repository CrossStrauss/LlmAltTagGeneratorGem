# Standard Ruby libraries needed for HTTP requests, JSON parsing, and SSL verification
require "uri"        # For parsing and handling URLs
require "net/http"   # For making HTTP requests
require "json"       # For encoding/decoding JSON
require "openssl"    # For handling SSL/TLS

module AltTagGen
  # This class generates descriptive alt text for an image using an LLM (OpenAI API)
  class GenrateImageAltTag
    
    # Initialize the generator with an image URL and load configuration values from the gem
    #
    # @param image_url [String] The URL of the image for which to generate alt text
    def initialize(image_url)
      @image_url = image_url                 # The URL of the image to process
      @api_key = AltTagGen.config.api_key    # OpenAI API key from gem configuration
      @model = AltTagGen.config.model        # LLM model to use (e.g., "gpt-4o-mini")
      @openai_api_url = AltTagGen.config.openai_api_url  # API endpoint
      @max_tokens = AltTagGen.config.max_tokens         # Max tokens to generate
      @system_prompt = AltTagGen.config.system_prompt || "You are an AI trained to generate descriptive alt text for images."
      @user_prompt = AltTagGen.config.user_prompt || "Write a short, descriptive alt text for this image:"
    end

    # Builds the prompt to send to the LLM
    #
    # @return [Array<Hash>] Array of messages following OpenAI's Chat Completions format
    def llm_prompt
      [
        {
          role: "system",   # System message gives context to the AI
          content: @system_prompt
        },
        {
          role: "user",     # User message contains instructions and the image URL
          content: [
            { type: "text", text: @user_prompt },            # Instruction text
            { type: "image_url", image_url: { url: @image_url } }  # Image to analyze
          ]
        }
      ]
    end

    # Makes the request to the OpenAI API and returns the generated alt text
    #
    # @return [String] The alt text generated by the AI
    # @raise [RuntimeError] If the API request fails
    def generate
      # Parse the API URL to use in the HTTP request
      uri = URI.parse(@openai_api_url)

      # Initialize an HTTP client for the API endpoint
      http = Net::HTTP.new(uri.host, uri.port)
      http.use_ssl = true  # Enable HTTPS

      # Ensure the SSL certificates are verified (prevents MITM attacks)
      http.ca_file = '/etc/ssl/certs/ca-certificates.crt'
      http.verify_mode = OpenSSL::SSL::VERIFY_PEER

      # Build the request payload
      request_body = {
        model: @model,
        messages: llm_prompt,  # The prompt messages array
        max_tokens: @max_tokens
      }

      # Create the POST request and set required headers
      request = Net::HTTP::Post.new(uri.request_uri)
      request["Content-Type"] = "application/json"
      request["Authorization"] = "Bearer #{@api_key}"  # API key for authentication
      request.body = request_body.to_json

      # Perform the HTTP request
      response = http.request(request)

      # Parse the response if successful, otherwise raise an error
      if response.is_a?(Net::HTTPSuccess)
        json = JSON.parse(response.body)
        # Return the generated alt text (strip whitespace)
        json["choices"].first["message"]["content"].strip
      else
        # Raise an error if the API call fails
        raise "OpenAI API request failed: #{response.code} - #{response.body}"
      end
    end

  end
end
